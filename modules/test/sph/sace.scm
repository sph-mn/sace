(define-test-module (test sph sace)
  (import (sph test) (sph sace-ir1) (sph sace-ir2) (sph sace) (sph indent-tree))

  (define-test (sace-ir1 inp exp) (sace-ir1 (list inp)))
  (define-test (sace-ir2 inp exp) (sace-ir2 (list inp)))
  (define-test (sace-compile inp exp) (sace-compile (list inp)))

  (test-execute-procedures-lambda
    (parse-indent-tree "user\n  at least\n    2\n    has s\n    can l"
      (("user" ("at least" "2" "has s" "can l"))))
    (sace-ir1 ("x" ("is any of" "a" "b")) (("x" ("is" ("any of" "a" "b"))))
      ("x" ("can be or" "p" "q")) (("x" ("can be" ("or" "p" "q"))))
      ("a" ("is and" "red" "large")) (("a" ("is" ("and" "red" "large"))))
      ("system" ("output can be any of" "json" "xml"))
      (("system" ("output" ("can be" ("any of" "json" "xml"))))))
    (sace-ir2 ("x" ("is" ("any of" "a" "b"))) ((coord "x" "is" or ("a" "b")))
      ("x" ("can be" ("any of" "p" "q"))) ((coord "x" "can be" or ("p" "q")))
      ("feature" ("iff" "flag is set" "mode is enabled"))
      ((iff "feature" "flag is set" "mode is enabled")) ("user" ("has" "role admin") ("is" "active"))
      ((simple "user" "has role admin") (simple "user" "is active"))
      ("system" ("output" ("can be" "json" "xml")))
      ((simple "system output" "can be json") (simple "system output" "can be xml"))
      ("iff" "feature flag is set" "mode is enabled")
      ((iff "" "feature flag is set" "mode is enabled"))
      ("feature" ("iff" "flag is set" "mode is enabled"))
      ((iff "feature" "flag is set" "mode is enabled")))
    (sace-compile ("system" ("output" ("can be" ("any of" "json" "xml"))))
      "system output can be json or xml." ("api" ("can be" ("either" "v1" "v2")))
      "api can be either v1 or v2." ("iff" "feature flag is set" "mode is enabled")
      "feature flag is set if and only if mode is enabled."
      ("feature" ("iff" "flag is set" "mode is enabled"))
      "feature flag is set if and only if mode is enabled.")))
